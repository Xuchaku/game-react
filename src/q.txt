import { useLayoutEffect, useMemo, useState, useRef } from "react";
import "./styles.css";

function Problem() {
  const [items, setItems] = useState([
    { value: 34, x: 20, y: 20 },
    { value: 12, x: 140, y: 60 },
    { value: 55, x: 260, y: 20 },
    { value: 10, x: 380, y: 60 },
    { value: 99, x: 500, y: 20 }
  ]);
  const [slots, setSlots] = useState([
    { index: 0, isEmpty: true, value: null },
    { index: 1, isEmpty: true, value: null },
    { index: 2, isEmpty: true, value: null },
    { index: 3, isEmpty: true, value: null },
    { index: 4, isEmpty: true, value: null }
  ]);
  //const [answers, setAnswers] = useState([]);
  const currentItemRef = useRef(null);
  function handlerMove(e) {
    if (currentItemRef.current) {
      console.log("move");
      currentItemRef.current.style.left = `${e.clientX - 50}px`;
      currentItemRef.current.style.top = `${e.clientY - 50}px`;
    }
  }

  useEffect(() => {
    document.addEventListener("mousemove", handlerMove);
    return () => {
      document.removeEventListener("mousemove", handlerMove);
    };
  }, []);
  function handlerDown(e) {
    currentItemRef.current = e.target;
  }
  function handlerUp(e) {
    currentItemRef.current = null;
  }

  function handlerOver(e, slot) {
    console.log("over", slot.index);
  }
  return (
    <div className="container">
      {items.map((item) => {
        return (
          <div
            onMouseDown={handlerDown}
            onMouseUp={handlerUp}
            style={{ left: item.x, top: item.y }}
            className="val"
          >
            {item.value}
          </div>
        );
      })}

      <div className="slots">
        {slots.map((slot) => {
          return (
            <div
              onMouseOver={(e) => handlerOver(e, slot)}
              className="item"
            ></div>
          );
        })}
      </div>
    </div>
  );
}

function Problem2({ is }) {
  const [items, setItems] = useState([
    { value: Math.floor(Math.random() * 100), x: 20, y: 20 },
    { value: Math.floor(Math.random() * 100), x: 140, y: 60 },
    { value: Math.floor(Math.random() * 100), x: 260, y: 20 },
    { value: Math.floor(Math.random() * 100), x: 380, y: 60 },
    { value: Math.floor(Math.random() * 100), x: 500, y: 20 }
  ]);
  const [slots, setSlots] = useState([
    { index: 0, isEmpty: true, value: null, x: 0, y: 0 },
    { index: 1, isEmpty: true, value: null, x: 0, y: 0 },
    { index: 2, isEmpty: true, value: null, x: 0, y: 0 },
    { index: 3, isEmpty: true, value: null, x: 0, y: 0 },
    { index: 4, isEmpty: true, value: null, x: 0, y: 0 }
  ]);
  const answers = useMemo(() => {
    const values = items.map((item) => {
      return item.value;
    });
    return values.sort((a, b) => a - b);
  }, [items]);
  const currentItemRef = useRef(null);
  function handlerMove(e) {
    if (currentItemRef.current) {
      currentItemRef.current.style.left = `${e.clientX - 50}px`;
      currentItemRef.current.style.top = `${e.clientY - 50}px`;
    }
  }

  useLayoutEffect(() => {
    const rects = document.querySelectorAll(".item");
    const slots2 = [];
    rects.forEach((rect) => {
      let index = rect.getAttribute("data-index");
      let { x, y } = rect.getBoundingClientRect();
      slots2.push({
        index,
        isEmpty: true,
        value: null,
        x: Math.floor(x),
        y: Math.floor(y)
      });
    });
    setSlots(slots2);
    document.addEventListener("mousemove", handlerMove);
    return () => {
      document.removeEventListener("mousemove", handlerMove);
    };
  }, []);

  function getIndexSlotByXY(x, y, slots) {
    let findIndex = slots.findIndex((slot) => {
      return (
        x >= slot.x && x <= slot.x + 100 && y >= slot.y && y <= slot.y + 100
      );
    });
    return findIndex;
  }
  function handlerDown(e) {
    currentItemRef.current = e.target;
  }
  function handlerUp(item, e) {
    let index = getIndexSlotByXY(e.clientX, e.clientY, slots);

    if (item.value == answers[index] && index >= 0) {
    } else {
      currentItemRef.current.style.left = `${item.x}px`;
      currentItemRef.current.style.top = `${item.y}px`;
    }
    currentItemRef.current = null;
  }
  console.log("render");
  return (
    <div className="container">
      {items.map((item) => {
        return (
          <div
            onMouseDown={handlerDown}
            onMouseUp={(e) => handlerUp(item, e)}
            style={{ left: item.x, top: item.y }}
            className="val"
          >
            {item.value}
          </div>
        );
      })}

      <div className="slots">
        {slots.map((slot) => {
          return (
            <div
              data-index={slot.index}
              className={`item item-${slot.index}`}
            ></div>
          );
        })}
      </div>
    </div>
  );
}

export default function App() {
  const [is, setIs] = useState(true);

  return (
    <div className="App">
      <Problem2 />
    </div>
  );
}
